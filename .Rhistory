edit(dataQ)
dataQ %>% apply(2, function(x) ifelse(x| dataQ$SEX==2,0,1)) -> dataT
dataQ %>% apply(2, function(x) ifelse(x| dataQ$SEX=2,0,1)) -> dataT
dataQ %>% select("SEX") %>% apply(2, function(x) ifelse(x| x=2,0,1)) -> dataT
dataQ %>% select("SEX") %>% apply(2, function(x) ifelse(x| x==2,0,1)) -> dataT
dataQ %>% mutate(SEX = ifelse(dataQ$SEX==2,0,1)) -> dataT
edit(dataT)
edit(dataQ)
#Q4~Q6: omit missing
data4 <- read.table("data1.txt", header = T)
dataQ <- na.omit(data1[c("SEX","PHYSS","DATEDUR","SERIOUS")])
dataQ %>% mutate(SEX = ifelse(dataQ$SEX==2,0,1)) -> dataT
edit(dataT)
dataQ$SEX;dataT$SEX
dataQ %>% mutate(SEX = ifelse(dataQ$SEX==2,0,1)) -> dataQ #female=1, male=0
dataQ
summary(dataQ)
#Q4
data.frame(as.factor(dataQ$SEX),
as.factor(dataQ$DATEDUR),
as.factor(dataQ$SERIOUS),
as.numeric(dataQ$PHYSS))
summary(dataQ)
#Q4
data.frame(as.factor(dataQ$SEX),
as.factor(dataQ$DATEDUR),
as.factor(dataQ$SERIOUS),
as.numeric(dataQ$PHYSS))
#Q4
dataT <- data.frame(as.factor(dataQ$SEX),
as.factor(dataQ$DATEDUR),
as.factor(dataQ$SERIOUS),
as.numeric(dataQ$PHYSS))
summary(dataT)
#Q4
bi.model <- lm(PHYSS ~ SEX, data = dataT)
names(dataT)
edit(dataT)
dataT <- data.frame(SEX=as.factor(dataQ$SEX),
DATEDUR=as.factor(dataQ$DATEDUR),
SERIOUS=as.factor(dataQ$SERIOUS),
PHYSS=as.numeric(dataQ$PHYSS))
edit(dataT)
summary(dataT)
#Q4
bi.model <- lm(PHYSS ~ SEX, data = dataT)
summary(bi.model)
#Q4~Q6: omit missing
data4 <- read.table("data1.txt", header = T)
edit(data4)
dataQ <- na.omit(data1[c("SEX","PHYSS","DATEDUR","SERIOUS")])
sum(is.na(dataQ)==T);summary(dataQ) #check missing
dataQ %>% mutate(SEX = ifelse(dataQ$SEX==2,0,1)) -> dataQ #female=1, male=0
dataT <- data.frame(SEX=as.factor(dataQ$SEX),
DATEDUR=as.factor(dataQ$DATEDUR),
SERIOUS=as.factor(dataQ$SERIOUS),
PHYSS=as.numeric(dataQ$PHYSS))
#Q4
bi.model <- lm(PHYSS ~ SEX, data = dataT)
summary(bi.model)
edit(dataT)
#Q4~Q6: omit missing
data4 <- read.table("data1.txt", header = T)
edit(data4)
sum(is.na(dataQ)==T);summary(dataQ) #check missing
dataQ %>% mutate(SEX = ifelse(dataQ$SEX==2,0,1)) -> dataQ #female=1, male=0
dataT <- data.frame(SEX=as.factor(dataQ$SEX),
DATEDUR=as.factor(dataQ$DATEDUR),
SERIOUS=as.factor(dataQ$SERIOUS),
PHYSS=as.numeric(dataQ$PHYSS))
dataT <- na.omit(dataQ[c("SEX","PHYSS","DATEDUR","SERIOUS")])
#Q4
bi.model <- lm(PHYSS ~ SEX, data = dataT)
summary(bi.model)
sum(is.na(dataQ)==T);summary(dataQ) #check missing
edit(dataT)
#Q4~Q6: omit missing
data4 <- read.table("data1.txt", header = T)
edit(data4)
#Q4~Q6: omit missing
data4 <- read.table("data1.txt", header = T, na.strings = ".")
dataQ <- na.omit(data1[c("SEX","PHYSS","DATEDUR","SERIOUS")])
sum(is.na(dataQ)==T);summary(dataQ) #check missing
dataQ %>% mutate(SEX = ifelse(dataQ$SEX==2,0,1)) -> dataQ #female=1, male=0
dataT <- data.frame(SEX=as.factor(dataQ$SEX),
DATEDUR=as.factor(dataQ$DATEDUR),
SERIOUS=as.factor(dataQ$SERIOUS),
PHYSS=as.numeric(dataQ$PHYSS))
#Q4
bi.model <- lm(PHYSS ~ SEX, data = dataT)
summary(bi.model)
dataT
dataQ
dataQ <- na.omit(data4[c("SEX","PHYSS","DATEDUR","SERIOUS")])
sum(is.na(dataQ)==T);summary(dataQ) #check missing
dataQ %>% mutate(SEX = ifelse(dataQ$SEX==2,0,1)) -> dataQ #female=1, male=0
dataT <- data.frame(SEX=as.factor(dataQ$SEX),
DATEDUR=as.factor(dataQ$DATEDUR),
SERIOUS=as.factor(dataQ$SERIOUS),
PHYSS=as.numeric(dataQ$PHYSS))
#Q4
bi.model <- lm(PHYSS ~ SEX, data = dataT)
summary(bi.model)
dataT
summary(bi.model)
summary(dataT)
?t.test
t.test(SEX,y = PHYSS)
t.test(SEX,y = PHYSS, dataT)
names(dataT)
t.test(SEX, y = PHYSS, dataT)
t.test(PHYSS ~ SEX, data = dataT)
summary(bi.model)
t.test(PHYSS ~ SEX, data = dataT, var.equal = T)
summary(bi.model)
tt <- t.test(PHYSS ~ SEX, data = dataT, var.equal = T)
summary(tt)
tt <- t.test(PHYSS ~ SEX, data = dataT, var.equal = T)
summary(tt)
tt
summary(bi.model);tt
tt$estimate
1.143951-1.200267
#if assume equal variance between two groups,
#p-value of t-test and F-test is equal to .2386
#intercept of the linear model is equal to mean of group 0(=male); 1.200267
tt$estimate;bi.model$coefficients
#slope of the linear model is equal to difference between two groups (female-male); -.056316
tt$estimate[2,1]
#slope of the linear model is equal to difference between two groups (female-male); -.056316
tt$estimate[,1]
#slope of the linear model is equal to difference between two groups (female-male); -.056316
tt$estimate[2]
#slope of the linear model is equal to difference between two groups (female-male); -.056316
tt$estimate[2]-tt$estimate[1]
#slope of the linear model is equal to difference between two groups (female-male); -.056316
(tt$estimate[2]-tt$estimate[1])==bi.model$coefficients
#slope of the linear model is equal to difference between two groups (female-male); -.056316
(tt$estimate[2]-tt$estimate[1])==bi.model$coefficients[2]
bi.model$coefficients[2]
(tt$estimate[2]-tt$estimate[1])
#slope of the linear model is equal to difference between two groups (female-male); -.056316
(tt$estimate[2]-tt$estimate[1])==bi.model$coefficients[2]
#slope of the linear model is equal to difference between two groups (female-male); -.056316
(tt$estimate[2]-tt$estimate[1])==(bi.model$coefficients[2])
#slope of the linear model is equal to difference between two groups (female-male); -.056316
((tt$estimate[2]-tt$estimate[1])==(bi.model$coefficients[2]))
#slope of the linear model is equal to difference between two groups (female-male); -.056316
tt$estimate[2]-tt$estimate[1])=(bi.model$coefficients[2]
#slope of the linear model is equal to difference between two groups (female-male); -.056316
tt$estimate[2]-tt$estimate[1]==(bi.model$coefficients[2]
#slope of the linear model is equal to difference between two groups (female-male); -.056316
tt$estimate[2]-tt$estimate[1]==bi.model$coefficients[2]
#slope of the linear model is equal to difference between two groups (female-male); -.056316
tt$estimate[2]-tt$estimate[1]==bi.model$coefficients[2]
#slope of the linear model is equal to difference between two groups (female-male); -.056316
tt$estimate[2]-tt$estimate[1];bi.model$coefficients[2]
#Q5
lm(PHYSS~DATEDUR, data = dataT)
#Q5
categoric.model <- lm(PHYSS~DATEDUR, data = dataT)
summary(categoric.model)
# Data with a two-group categorical predictor
gre=read.csv("GRE.csv",header = TRUE)
# Data with a two-group categorical predictor
gre=read.csv("GRE.csv",header = TRUE)
mean(dataT$DATEDUR)
table(dataT$DATEDUR)
summarise(dataT$PHYSS, groups(dataT$DATEDUR))
dataT %>% groups(dataT$DATEDUR) %>% mean(PHYSS)
dataT %>% groups(DATEDUR) %>% mean(PHYSS)
dataT %>% group_by(DATEDUR) %>% mean(PHYSS)
data4 %>% group_by(DATEDUR) %>% mean(PHYSS)
data4 %>% group_by(DATEDUR) %>% mean(PHYSS)
summary(categoric.model)
dataQ %>% group_by(data.dur) %>% mean(PHYSS)
dataQ %>% group_by(DATEDUR) %>% mean(PHYSS)
#Q4~Q6: omit missing
data4 <- read.table("data1.txt", header = T, na.strings = ".")
#edit(data4)
dataQ <- na.omit(data4[c("SEX","PHYSS","DATEDUR","SERIOUS")])
sum(is.na(dataQ)==T);summary(dataQ) #check missing
dataQ %>% mutate(SEX = ifelse(dataQ$SEX==2,0,1)) -> dataQ #female=1, male=0
dataQ
dataQ %>% mutate(d1=ifelse(DATEDUR==2,1,0), d2=ifelse(DATEDUR==3,1,0),
d3=ifelse(DATEDUR==4,1,0), d4=ifelse(DATEDUR==4,1,0)) -> dum.dataQ
edit(dum.dataQ)
dataQ %>% mutate(d1=ifelse(DATEDUR==2,1,0), d2=ifelse(DATEDUR==3,1,0),
d3=ifelse(DATEDUR==4,1,0), d4=ifelse(DATEDUR==5,1,0)) -> dum.dataQ
edit(dum.dataQ)
dummy.model <- lm(PHYSS~d1+d2+d3+d4, data = dum.dataQ)
summary(dummy.model)
summary(categoric.model)
summary(dummy.model) #same with categoric.model
#Q6
interaction.model <- lm(PHYSS~SERIOUS + SEX + SERIOUS*SEX, data = dataT)
summary(interaction.model)
#do this using dummy variables (comparison group = 1)
dataQ %>% mutate(d1=ifelse(SERIOUS==2,1,0), d2=ifelse(SERIOUS==3,1,0),
d3=ifelse(SERIOUS==4,1,0), d4=ifelse(SERIOUS==5,1,0)) -> dum.data6
edit(dum.data6)
dummy.model6 <- lm(PHYSS ~ SEX +  d1 + d2 + d3 + d4 + SEX*( d1 + d2 + d3 + d4), data = dum.data6)
summary(dummy.model6)
summary(interaction.model)
#Q6.b
# Load the emmeans package
install.packages(emmeans)
#Q6.b
# Load the emmeans package
install.packages("emmeans")
library(emmeans)
# Perform tests of simple effects
simple_effects <- emtrends(dummy.model6, ~ SEX | d1 + d2 + d3 + d4)
# Perform tests of simple effects
simple_effects <- emtrends(dummy.model6, ~ SEX | d1 + d2 + d3 + d4)
# Perform tests of simple effects for SEX within each level of d1, d2, d3, d4
simple_effects_d1 <- emtrends(dummy.model6, ~ SEX | d1)
simple_effects_d2 <- emtrends(dummy.model6, ~ SEX | d2)
simple_effects_d3 <- emtrends(dummy.model6, ~ SEX | d3)
simple_effects_d4 <- emtrends(dummy.model6, ~ SEX | d4)
?emtrends
# Perform tests of simple effects
simple_effects <- emtrends(dummy.model6, ~ SEX | d1 + d2 + d3 + d4, var = "d1")
simple_effects
# Print results
print(simple_effects)
# Perform tests of simple effects
simple_effects <- emtrends(dummy.model6, ~ SEX | d1 + d2 + d3 + d4, var = "PHYSS")
# Perform tests of simple effects
simple_effects <- emtrends(dummy.model6, ~ SEX | d1 + d2 + d3 + d4, var = "SEX")
# Print results
print(simple_effects)
# Perform tests of main effects
main_effects <- emtrends(dummy.model6, ~ SEX)
# Perform tests of main effects
main_effects <- emtrends(dummy.model6, ~ SEX, var="d1")
# Print results
print(main_effects)
# Perform tests of simple effects for SEX within each level of d1, d2, d3, d4
simple_effects_d1 <- emtrends(dummy.model6, ~ SEX | d1, var="d1")
# Print results
print(simple_effects_d1)
simple_effects_d2 <- emtrends(dummy.model6, ~ SEX | d2, var="d2")
simple_effects_d3 <- emtrends(dummy.model6, ~ SEX | d3, var="d3")
simple_effects_d4 <- emtrends(dummy.model6, ~ SEX | d4, var="d4")
# Print results
print(simple_effects_d1)
print(simple_effects_d2)
print(simple_effects_d3)
print(simple_effects_d4)
summary(dummy.model6) #same with interaction.model
# Create an object for estimated marginal means
emm <- emmeans(dummy.model6, specs = ~ SEX | d1 + d2 + d3 + d4, var="d1")
# For simple effects
simple_effects <- pairs(emm, reverse = TRUE)
# For main effects
main_effects <- emmeans(dummy.model6, specs = ~ SEX)
# Adjust p-values for multiple comparisons (Bonferroni)
simple_effects <- summary(update(simple_effects, p.adjust = "bonferroni"))
main_effects <- summary(update(main_effects, p.adjust = "bonferroni"))
# Print the results
print(simple_effects)
#anova
as <- aov(PHYSS ~ SEX*( d1 + d2 + d3 + d4), data = dum.data6)
anova(as)
summary(dummy.model6) #same with interaction.model
summary(dummy.model6) #same with interaction.model
anova(as)
#anova
as <- aov(PHYSS ~ SEX*SERIOUS, data = dataT)
anova(as)
TukeyHSD(as)
TukeyHSD(as)
anova(as)
anova(as)
summary(interaction.model)
anova(as)
# Perform tests of simple effects for SEX within each level of d1, d2, d3, d4
simple_effects_d1 <- emtrends(dummy.model6, ~ SEX | d1, var="d1")
# Print results
print(simple_effects_d1)
print(simple_effects_d2)
print(simple_effects_d3)
print(simple_effects_d4)
summary(dummy.model6) #same with interaction.model
# Print results
print(simple_effects_d1)
# Print results
print(simple_effects_d1) #n.s.
print(simple_effects_d2)
print(simple_effects_d2) #n.s.
print(simple_effects_d3)
print(simple_effects_d3) #n.s.
print(simple_effects_d4)
# Print results
print(simple_effects_d1)
# Perform tests of simple effects for SEX within each level of d1, d2, d3, d4
simple_effects <- emtrends(dummy.model6, ~ SEX | d1+d2+d3+d4, var="d1")
simple_effects
dummy.model6 <- lm(PHYSS ~ SEX +  d1 + d2 + d3 + d4 + SEX*( d1 + d2 + d3 + d4), data = dum.data6)
summary(dummy.model6) #same with interaction.model
#anova
as <- aov(PHYSS ~ SEX*SERIOUS, data = dataT)
anova(as)
summary(bi.model) #intercept is 1.200*** and slope is -.056(n.s.)
summary(dummy.model6) #same with interaction.model
dummy.model6 <- lm(PHYSS ~ SEX*( d1 + d2 + d3 + d4), data = dum.data6)
summary(dummy.model6) #same with interaction.model
#Q6
interaction.model <- lm(PHYSS~SERIOUS + SEX + SERIOUS*SEX, data = dataT)
summary(interaction.model)
dummy.model6 <- lm(PHYSS ~ SEX +  d1 + d2 + d3 + d4 + (d1 + d2 + d3 + d4)*SEX, data = dum.data6)
summary(dummy.model6) #same with interaction.model
#anova
as <- aov(PHYSS ~ SERIOUS*SEX, data = dataT)
anova(as)
TukeyHSD(as)
#Q6.b
dummy.modelmain <- lm(PHYSS ~ SEX +  d1 + d2 + d3 + d4, data = dum.data6)
summary(dummy.modelmain)
anova(dummy.model6, dummy.modelmain)
summary(dummy.model) #same with categoric.model
summary(bi.model);tt
dummy.modelmain2 <- lm(PHYSS ~ SEX, data = dum.data6)
anova(dummy.modelmain2, dummy.modelmain2) #effect of seriousness)
anova(dummy.modelmain2, dummy.modelmain) #main effect of seriousness)
anova(dummy.modemain, dummy.model) #main effect of sex
anova(dummy.modelmain, dummy.model) #main effect of sex
anova(dummy.modelmain2, dummy.modelmain) #main effect of seriousness)
dummy.modelmain2 <- lm(PHYSS ~ SEX, data = dum.data6)
anova(dummy.model6, dummy.modelmain) #effect of interaction
summary(dummy.modelmain2)
summary(dummy.model6) #same with interaction.model
TukeyHSD(as)
#Q1.d
# 로그 함수 정의
log_function <- function(x) {
return(4.874*log(x) + 1.382)
} #lm으로 구한 기울기, 절편(회귀식_log model)
sqrt_function <- function(x) {
return(4.993*sqrt(x)-2.424)
} #lm으로 구한 기울기, 절편(회귀식_sqrt model)
# ggplot2를 사용하여 산점도와 로그 함수를 그리기
plot.for.d <- ggplot(trans_data1, aes(x = EgoStrength, y = RiskTaking)) +
geom_point() +  # 산점도
stat_function(fun = log_function, color = "purple") +  # 로그 함수를 추가
stat_function(fun = sqrt_function, color = "violet")+
labs(title = "Scatterplot with log&sqrt Function", x = "EgoStrength", y = "RiskTaking") +
geom_text(aes(x = 3, y = 10, label = "y_hat=4.874*log(x) + 1.382, R^=.939"), color = "purple", size=3) +  # 로그 함수의 이름 추가
geom_text(aes(x = 8, y = 8, label = "y_hat=4.993*sqrt(x)-2.424, R^=.937"), color = "violet", size=3)  # 제곱근 함수의 이름 추가
plot.for.d
# ggplot2를 사용하여 산점도와 로그 함수를 그리기
plot.for.d <- ggplot(trans_data1, aes(x = EgoStrength, y = RiskTaking)) +
geom_point() +  # 산점도
stat_function(fun = log_function, color = "purple") +  # 로그 함수를 추가
stat_function(fun = sqrt_function, color = "violet")+
labs(title = "Scatterplot with log&sqrt Function", x = "EgoStrength", y = "RiskTaking") +
geom_text(aes(x = 3, y = 11, label = "y_hat=4.874*log(x) + 1.382, R^=.939"), color = "purple", size=3) +  # 로그 함수의 이름 추가
geom_text(aes(x = 8, y = 8, label = "y_hat=4.993*sqrt(x)-2.424, R^=.937"), color = "violet", size=3)  # 제곱근 함수의 이름 추가
plot.for.d
plot(data1$EgoStrength,data1$RiskTaking)
#edit(data1)
#Q1.a
scatter.smooth(data1$EgoStrength,data1$RiskTaking,xlab="x",ylab="y",span=2/3,degree=1,
main="span=2/3,degree=1")
scatter.smooth(data1$EgoStrength,data1$RiskTaking,xlab="x",ylab="y", span=2/3,degree=2,
main="span=2/3,degree=2")
data1 <- read.table('risktaking.txt', header = T)
plot(data1$EgoStrength,data1$RiskTaking)
#edit(data1)
#Q1.a
scatter.smooth(data1$EgoStrength,data1$RiskTaking,xlab="x",ylab="y",span=2/3,degree=1,
main="span=2/3,degree=1")
scatter.smooth(data1$EgoStrength,data1$RiskTaking,xlab="x",ylab="y", span=2/3,degree=2,
main="span=2/3,degree=2")
scatter.smooth(data1$EgoStrength,data1$RiskTaking,xlab="x",ylab="y",span=1/3,degree=1,
main="span=1/3,degree=1")
scatter.smooth(data1$EgoStrength,data1$RiskTaking,xlab="x",ylab="y", span=2/3,degree=2,
main="span=2/3,degree=2")
summary(logM)
#Q1.b
#log
data1 %>% mutate(lnEgo = log(data2$EgoStrength), sqrtEgo = sqrt(EgoStrength)) -> trans_data1
trans_data1
summary(logM)
summary(SqM)
plot(data1$EgoStrength,data1$RiskTaking)
scatter.smooth(data1$EgoStrength,data1$RiskTaking,xlab="x",ylab="y", span=2/3,degree=2,
main="span=2/3,degree=2")
plot(data1$EgoStrength,data1$RiskTaking)
scatter.smooth(data1$EgoStrength,data1$RiskTaking,xlab="x",ylab="y", span=2/3,degree=2,
main="span=2/3,degree=2")
#Q1.d
# 로그 함수 정의
log_function <- function(x) {
return(4.874*log(x) + 1.382)
} #lm으로 구한 기울기, 절편(회귀식_log model)
sqrt_function <- function(x) {
return(4.993*sqrt(x)-2.424)
} #lm으로 구한 기울기, 절편(회귀식_sqrt model)
# ggplot2를 사용하여 산점도와 로그 함수를 그리기
plot.for.d <- ggplot(trans_data1, aes(x = EgoStrength, y = RiskTaking)) +
geom_point() +  # 산점도
stat_function(fun = log_function, color = "purple") +  # 로그 함수를 추가
stat_function(fun = sqrt_function, color = "violet")+
labs(title = "Scatterplot with log&sqrt Function", x = "EgoStrength", y = "RiskTaking") +
geom_text(aes(x = 3, y = 11, label = "y_hat=4.874*log(x) + 1.382, R^=.939"), color = "purple", size=3) +  # 로그 함수의 이름 추가
geom_text(aes(x = 8, y = 8, label = "y_hat=4.993*sqrt(x)-2.424, R^=.937"), color = "violet", size=3)  # 제곱근 함수의 이름 추가
plot.for.d
cor1
cor2
summary(cubic.regression) #original
summary(cen.cubic.regression)
anova(model1, model2) #accept model2
anova(model2, model3) #deny model3
#Q1.h
plot(transdata2$quadES,transdata2$RiskTaking)
#Q1.h
plot(transdata2$quadES,transdata2$RiskTaking)
summary(model2);summary(logM);summary(SqM)
#Q2
Q2function <- function(D1, D2, D3) {
return(5 + 6*D1 + 3*D2 - 4*D3)
}
(Q2function(1,0,0) -> group1)
(Q2function(0,1,0) -> group2)
(Q2function(0,0,1) -> group3)
(Q2function(0,0,0) -> group4)
#Q4
bi.model <- lm(PHYSS ~ SEX, data = dataT)
summary(bi.model) #intercept is 1.200*** and slope is -.056(n.s.)
#F-test p-value is .2386
tt <- t.test(PHYSS ~ SEX, data = dataT, var.equal = T)
summary(bi.model);tt
#if assume equal variance between two groups,
#p-value of t-test and F-test is equal to .2386
#intercept of the linear model is equal to mean of group 0(=male); 1.200267
tt$estimate[2]-tt$estimate[1];bi.model$coefficients[2]
#Q5
categoric.model <- lm(PHYSS~DATEDUR, data = dataT)
#Q5
categoric.model <- lm(PHYSS~DATEDUR, data = dataT)
summary(categoric.model)
#do this using dummy variables (comparison group = 1)
dataQ %>% mutate(d1=ifelse(DATEDUR==2,1,0), d2=ifelse(DATEDUR==3,1,0),
d3=ifelse(DATEDUR==4,1,0), d4=ifelse(DATEDUR==5,1,0)) -> dum.dataQ
dummy.model <- lm(PHYSS ~ d1 + d2 + d3 + d4, data = dum.dataQ)
summary(dummy.model) #same with categoric.model
#Q6
interaction.model <- lm(PHYSS~SERIOUS + SEX + SERIOUS*SEX, data = dataT)
summary(interaction.model)
#Q6.a
#do this using dummy variables (comparison group = 1)
dataQ %>% mutate(d1=ifelse(SERIOUS==2,1,0), d2=ifelse(SERIOUS==3,1,0),
d3=ifelse(SERIOUS==4,1,0), d4=ifelse(SERIOUS==5,1,0)) -> dum.data6
dummy.model6 <- lm(PHYSS ~ SEX +  d1 + d2 + d3 + d4 + (d1 + d2 + d3 + d4)*SEX, data = dum.data6)
summary(dummy.model6) #same with interaction.model
#correlation_centered EgoStrength, its quad, cubic
transdata2 %>%
select("RiskTaking","c_ES", "cen_quadES","cen_cubicES") %>% cor() -> cor2
cor2
cor2
#correlation_centered EgoStrength, its quad, cubic
transdata2 %>%
select("RiskTaking","c_ES", "cen_quadES","cen_cubicES") %>% cor() -> cor2
library(psych);library(ggplot2)
library(tidyverse);library(tidyr)
#correlation_centered EgoStrength, its quad, cubic
transdata2 %>%
select("RiskTaking","c_ES", "cen_quadES","cen_cubicES") %>% cor() -> cor2
cor2
cor2
cor1
cor2
#Q1.h
plot(transdata2$quadES,transdata2$RiskTaking)
#Q1.h
plot(transdata2$quadES,transdata2$RiskTaking)
summary(model2);summary(logM);summary(SqM)
dummy.model6 <- lm(PHYSS ~ SEX +  d1 + d2 + d3 + d4 + (d1 + d2 + d3 + d4)*SEX, data = dum.data6)
summary(dummy.model6) #same with interaction.model
summary(interaction.model)
simple_effect <- lsmeans(interaction.model, data= dataT)
simple_effect <- lsmeans(interaction.model, pairwise ~ SEX | SERIOUS)
summary(sumple_effect)
simple_effect <- lsmeans(interaction.model, pairwise ~ SEX | SERIOUS)
summary(simple_effect)
.05 / 5
P.value1 <- 0.05
ad.p_value <- p.adjust(c(P.value1, P.value2, P.value3, P.value4, P.value5), method = "bonferroni")
P.value2 <- 0.05
P.value3 <- 0.05
P.value4 <- 0.05
P.value5 <- 0.05
ad.p_value <- p.adjust(c(P.value1, P.value2, P.value3, P.value4, P.value5), method = "bonferroni")
ad.p_value
?p.adjust
simple_effect <- lsmeans(interaction.model, pairwise ~ SEX | SERIOUS, p.adjust.methods= "bonferroni")
summary(simple_effect)
.05 / 5
simple_effects <- emtrends(dummy.model6, ~ SEX | d1+d2+d3+d4, var="d1")
#유의확률 .05/5
# Print results
print(simple_effects_d1)
print(simple_effects_d2)
print(simple_effects_d3)
print(simple_effects_d4)
TukeyHSD(as)
simple_effect <- lsmeans(interaction.model, pairwise ~ SEX | SERIOUS, p.adjust.methods= "bonferroni")
library(psych);library(ggplot2)
library(tidyverse);library(tidyr)
summary(simple_effect)
